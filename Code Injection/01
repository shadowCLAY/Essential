Cũng giống như các ví dụ khác về các vấn đề ứng dụng web, luôn hữu ích khi biết cách nhận xét phần còn lại của mã 
(tức là: hậu tố mà ứng dụng sẽ thêm vào dữ liệu do người dùng kiểm soát). 
Trong PHP, bạn có thể sử dụng // để loại bỏ mã được ứng dụng thêm vào.


Giống như với SQL injection, bạn có thể sử dụng cùng một kỹ thuật giá trị để kiểm tra và đảm bảo rằng bạn có một đoạn mã:

    Bằng cách sử dụng nhận xét và đưa vào / * giá trị ngẫu nhiên * /.
    Bằng cách chèn một từ nối đơn giản "." (where "được sử dụng để ngắt cú pháp và cải tổ nó một cách chính xác).
    Bằng cách thay thế tham số bạn đã cung cấp bằng cách nối chuỗi, ví dụ: "." Ha "." Cker "." thay vì hacker.

Bạn cũng có thể sử dụng tính năng phát hiện dựa trên thời gian cho vấn đề này bằng cách sử dụng hàm ngủ trong PHP. 
Bạn sẽ thấy chênh lệch múi giờ giữa:

    Không sử dụng hàm sleep hoặc gọi nó với độ trễ bằng 0: sleep (0).
    Một cuộc gọi đến hàm có độ trễ lâu: sleep (10).

Rõ ràng, việc chèn mã phải bằng ngôn ngữ được ứng dụng sử dụng. Do đó, bước đầu tiên trong quá trình tiêm là tìm ngôn ngữ được ứng dụng sử dụng. 
Để làm như vậy, bạn có thể xem xét tiêu đề của phản hồi, tạo lỗi hoặc xem cách ứng dụng xử lý các ký tự đặc biệt 
(ví dụ: bằng cách so sánh + và. Để nối các chuỗi.

Ví dụ này là một đoạn mã nhỏ. 
Nếu bạn đưa ra một trích dẫn duy nhất, không có gì xảy ra. 
Tuy nhiên, bạn có thể hiểu rõ hơn về vấn đề này bằng cách đưa vào một dấu ngoặc kép:
        Parse error: syntax error, unexpected '!', expecting ',' or ';' in /var/www/index.php(6) : eval()'d 
        code on line 1
        
        Điều này có thể là ngược lại; trích dẫn đơn có thể tạo ra lỗi trong đó trích dẫn kép có thể không.
        
        
        
 Dựa trên thông báo lỗi, chúng ta có thể thấy rằng đoạn mã đang sử dụng hàm eval: "Eval là ác ...".

Chúng tôi thấy rằng dấu ngoặc kép phá vỡ cú pháp và hàm eval dường như đang sử dụng đầu vào của chúng tôi. 
Từ đó, chúng tôi có thể cố gắng tính toán các tải trọng sẽ cho chúng tôi cùng một kết quả:

    ".": chúng tôi chỉ thêm một chuỗi nối; điều này sẽ cung cấp cho chúng tôi cùng một giá trị.
    "./*pentesterlab*/": chúng tôi chỉ thêm một chuỗi nối và thông tin bên trong nhận xét; điều này sẽ cung cấp cho chúng tôi cùng một giá trị.

Bây giờ chúng ta có các giá trị tương tự đang hoạt động, chúng ta cần phải chèn mã. 
Để cho thấy rằng chúng ta có thể thực thi mã, chúng ta có thể thử chạy một lệnh (ví dụ: uname -a bằng cách sử dụng thực thi mã). Mã PHP đầy đủ trông giống như:

system ('uname -a');

Thách thức ở đây là thoát ra khỏi cú pháp mã và giữ một cú pháp rõ ràng. Có rất nhiều cách để làm điều đó:

    Bằng cách thêm mã giả: ".system('uname -a'); $ dummy=".
    Bằng cách sử dụng chú thích: ".system('uname -a');# hoặc ".system('uname -a');//.

Đừng quên rằng bạn sẽ cần mã hóa URL một số ký tự (# và ;) trước khi gửi yêu cầu.

